{"ast":null,"code":"import { tap } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `http://127.0.0.1:8000/api`;\n    this.USER_ID_KEY = 'user_id';\n    this.isAuthenticated();\n  }\n  saveUserId(user_id) {\n    localStorage.setItem('user_id', user_id.toString());\n  }\n  getUserId() {\n    const userIdStr = localStorage.getItem('user_id');\n    return userIdStr ? parseInt(userIdStr, 10) : null;\n  }\n  // Méthode pour récupérer un user par son ID\n  getUserById(id) {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      })\n    };\n    return this.http.get(`${this.apiUrl}/users/${id}/`, httpOptions);\n  }\n  // Supprime l'`user_id` du local storage (appelé lors de la déconnexion)\n  clearUserId() {\n    localStorage.removeItem(this.USER_ID_KEY);\n  }\n  removeUserId() {\n    localStorage.removeItem('user_id');\n  }\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n  isAuthenticted() {\n    if (this.getToken() == null) return false;else {\n      this.token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.token}`\n        })\n      };\n      const id = localStorage.getItem('user_id');\n      this.http.get(`${this.apiUrl}/check-token`, httpOptions).pipe(tap({\n        next: response => console.log('response affiche toi ' + response),\n        error: err => console.log(err)\n      }));\n      console.log('iciiiiiiiii');\n    }\n    return true;\n  }\n  isAuthenticated() {\n    this.token = localStorage.getItem('token');\n    if (this.token === null) {\n      return false;\n    } else {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.token}`\n        })\n      };\n      this.http.get(`${this.apiUrl}/check-token`, httpOptions).pipe(tap({\n        next: response => {\n          console.log('Token valide : ', response);\n          return true;\n        },\n        error: err => {\n          console.log('Erreur de vérification du token : ', err.error);\n          return false;\n        }\n      })).toPromise().then(() => true).catch(() => false);\n    }\n    return true;\n  }\n  inscription(user) {\n    return this.http.post(`${this.apiUrl}/inscription`, user).pipe(tap({\n      next: response => console.log(response),\n      error: err => console.log(err)\n    })).pipe();\n  }\n  connexion(user) {\n    return this.http.post(`${this.apiUrl}/connexion`, user).pipe(tap(response => {\n      if (response.access_token) {\n        localStorage.setItem('token', response.access_token);\n      }\n    }));\n  }\n  isAuthentiated() {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      })\n    };\n    this.http.get(`${this.apiUrl}/check-token`, httpOptions).pipe(tap({\n      next: response => console.log('oooooooooooo' + response),\n      error: err => console.log('err' + err)\n    }));\n    if (this.http.get(`${this.apiUrl}/check-token`, httpOptions)) {\n      return true;\n    }\n    return true;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["tap","HttpHeaders","AuthService","constructor","http","isAuthenticated","saveUserId","user_id","localStorage","setItem","toString","getUserId","userIdStr","getItem","parseInt","getUserById","id","token","httpOptions","headers","Authorization","get","apiUrl","clearUserId","removeItem","USER_ID_KEY","removeUserId","saveToken","getToken","removeToken","isAuthenticted","pipe","next","response","console","log","error","err","toPromise","then","catch","inscription","user","post","connexion","access_token","isAuthentiated","factory","providedIn"],"sourceRoot":"","sources":["D:\\testJPM\\frontend\\todo\\src\\app\\_services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model';\nimport { Observable, tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = `http://127.0.0.1:8000/api`;\n  private readonly USER_ID_KEY = 'user_id';\n  token: any;\n\n  constructor(private http: HttpClient) {\n    this.isAuthenticated()\n  }\n\n  saveUserId(user_id: number) {\n    localStorage.setItem('user_id', user_id.toString());\n  }\n\n  getUserId(): number | null {\n    const userIdStr = localStorage.getItem('user_id');\n    return userIdStr ? parseInt(userIdStr, 10) : null;\n  }\n  // Méthode pour récupérer un user par son ID\n  getUserById(id: number) {\n    this.token = localStorage.getItem('token');\n\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),\n    };\n    return this.http.get(`${this.apiUrl}/users/${id}/`, httpOptions);\n  }\n\n  // Supprime l'`user_id` du local storage (appelé lors de la déconnexion)\n  clearUserId(): void {\n    localStorage.removeItem(this.USER_ID_KEY);\n  }\n\n  removeUserId() {\n    localStorage.removeItem('user_id');\n  }\n\n  saveToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n\n  isAuthenticted(): boolean {\n    if ( this.getToken() == null)\n      return false\n  else{\n    this.token = localStorage.getItem('token')\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),};\n      const id = localStorage.getItem('user_id')\n      this.http.get(`${this.apiUrl}/check-token`, httpOptions).pipe(\n        tap({\n          next: (response) => console.log('response affiche toi '+response),\n          error: (err) => console.log(err),\n        })\n      )\n      console.log('iciiiiiiiii');   \n  }\n  return true\n  }\n\n  isAuthenticated() {\n    this.token = localStorage.getItem('token');\n    if (this.token === null) {\n      return false; \n    } else {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.token}`,\n        }),\n      };\n       this.http.get(`${this.apiUrl}/check-token`, httpOptions)\n        .pipe(\n          tap({\n            next: (response) => {\n              console.log('Token valide : ', response);\n              return true\n            },\n            error: (err:any) => {\n              console.log('Erreur de vérification du token : ', err.error);\n              return false\n            },\n          })\n        )\n        .toPromise()\n        .then(() => true) \n        .catch(() => false); \n    }\n    \n    return true\n  }\n\n  inscription(user: User): Observable<User> {\n    return this.http\n      .post<User>(`${this.apiUrl}/inscription`, user)\n      .pipe(\n        tap({\n          next: (response) => console.log(response),\n          error: (err) => console.log(err),\n        })\n      )\n      .pipe();\n  }\n\n  connexion(user: User) {\n    return this.http.post<User>(`${this.apiUrl}/connexion`, user).pipe(\n      tap((response: any) => {\n        if (response.access_token) {\n          localStorage.setItem('token', response.access_token);\n        }\n      })\n    );\n  }\n\n  isAuthentiated()\n  {\n    \n    this.token = localStorage.getItem('token')\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),};\n       this.http.get(`${this.apiUrl}/check-token`,httpOptions).pipe(\n        tap({\n          next: (response) => console.log('oooooooooooo'+response),\n          error: (err) => console.log('err'+err),\n        })\n\n      )\n      if(this.http.get(`${this.apiUrl}/check-token`,httpOptions)){return true}\n      return true\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}