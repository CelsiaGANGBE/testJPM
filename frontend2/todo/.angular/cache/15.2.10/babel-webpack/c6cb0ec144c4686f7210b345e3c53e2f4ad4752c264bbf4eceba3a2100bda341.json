{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class TaskService {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.apiUrl = `http://127.0.0.1:8000/api`;\n  }\n  //tasks of someone\n  tasks(userId) {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      })\n    };\n    return this.http.get(`${this.apiUrl}/user/${userId}/tasks`, httpOptions);\n  }\n  newTask(task) {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      })\n    };\n    console.log(this.token);\n    return this.http.post(`${this.apiUrl}/tasks`, task, httpOptions).pipe(tap({\n      next: response => console.log(response),\n      error: err => {\n        console.log(err);\n        this.error = err.ok;\n        console.log(this.error);\n      }\n    }));\n  }\n  // Méthode pour récupérer une task par son ID\n  getTaskById(id) {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      })\n    };\n    return this.http.get(`${this.apiUrl}/tasks/${id}`, httpOptions).pipe(tap({\n      next: response => console.log(response),\n      error: err => {\n        console.log(err);\n        this.error = err.ok;\n        if (this.error == false) {\n          this.route.navigate(['/connexion']);\n        }\n        console.log(this.error);\n      }\n    }));\n  }\n  // Méthode pour mettre à jour une task existante\n  updateTask(task) {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      })\n    };\n    return this.http.put(`${this.apiUrl}/tasks/${task.id}`, task, httpOptions).pipe(tap({\n      next: response => console.log(response),\n      error: err => {\n        console.log(err);\n        this.error = err.ok;\n        console.log(this.error);\n      }\n    }));\n  }\n  // Méthode pour supprimer une task par son ID\n  deleteTask(id) {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      })\n    };\n    return this.http.delete(`${this.apiUrl}/tasks/${id}`, httpOptions).pipe(tap({\n      next: response => console.log(response),\n      error: err => {\n        console.log(err);\n        this.error = err.ok;\n        console.log(this.error);\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","tap","TaskService","constructor","http","route","tasks","userId","token","localStorage","getItem","httpOptions","headers","Authorization","get","apiUrl","newTask","task","console","log","post","pipe","next","response","error","err","ok","getTaskById","id","navigate","updateTask","put","deleteTask","delete","factory","providedIn"],"sourceRoot":"","sources":["D:\\testJPM\\frontend\\todo\\src\\app\\_services\\task.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { Task } from '../model';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService {\n  private apiUrl = `http://127.0.0.1:8000/api`;\n  token: any;\n  userId!: number | null;\n  error:any\n\n  constructor(private http: HttpClient, private route:Router) {}\n\n  //tasks of someone\n  tasks(userId: number | null) {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),\n    };\n    return this.http.get<any>(\n      `${this.apiUrl}/user/${userId}/tasks`,\n      httpOptions\n    );\n  }\n\n  newTask(task: Task): Observable<Task> {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),\n    };\n    console.log(this.token);\n    return this.http\n      .post<Task>(`${this.apiUrl}/tasks`, task, httpOptions)\n      .pipe(\n        tap({\n          next: (response) => console.log(response),\n          error: (err) => {console.log(err);this.error=err.ok;\n            \n            console.log(this.error);\n          },\n        })\n      )\n  }\n  // Méthode pour récupérer une task par son ID\n  getTaskById(id: number): Observable<Task> {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),\n    };\n    return this.http.get<Task>(`${this.apiUrl}/tasks/${id}`, httpOptions).pipe(\n      tap({\n        next: (response) => console.log(response),\n        error: (err) => {console.log(err);this.error=err.ok;\n          if(this.error == false){\n            this.route.navigate(['/connexion']);\n          }\n          console.log(this.error);\n        },\n      })\n    )\n  }\n\n  // Méthode pour mettre à jour une task existante\n  updateTask(task: Task): Observable<Task> {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),\n    };\n    return this.http.put<Task>(\n      `${this.apiUrl}/tasks/${task.id}`,\n      task,\n      httpOptions\n    ).pipe(\n      tap({\n        next: (response) => console.log(response),\n        error: (err) => {console.log(err);this.error=err.ok;\n  \n          console.log(this.error);\n        },\n      })\n    )\n  }\n\n  // Méthode pour supprimer une task par son ID\n  deleteTask(id: number): Observable<any> {\n    this.token = localStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n      }),\n    };\n    return this.http.delete(`${this.apiUrl}/tasks/${id}`, httpOptions).pipe(\n      tap({\n        next: (response) => console.log(response),\n        error: (err) => {console.log(err);this.error=err.ok;\n          \n          console.log(this.error);\n        },\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}